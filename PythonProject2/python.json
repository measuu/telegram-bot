[
  {
    "name": "Виведення даних",
    "poster": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEginSDW7V7S02HR8yrp1JAZFQwTwCgjXb90kP1_XZd2h1LiQqLt8WnE6JH_dtI-wyFHfqsf9sQhuCL9Dw1MKNYJCc_BJ76E5v_qcqN-DD0r_nsSfp_Ep4HY1ZIKkEC1tzX9jFRAFXgUuhE/s400/QIP+Shot+-+Screen+017.png",
    "description": "Для виведення даних на екран використовується команда print(). Усередині круглих дужок пишемо, що хочемо вивести на екран. Якщо це текст, обов'язково вказуємо його всередині лапок. Те, що ми пишемо у круглих дужках у команди print(), називається аргументами чи параметрами команди. Команда print() дозволяє вказувати кілька аргументів, у разі їх треба відокремлювати комами. ",
    "link": "https://www.youtube.com/watch?v=rVwhy7xNpwU"
  },
  {
    "name": "Типи даних",
    "poster": "https://naurok.com.ua/uploads/files/216262/147384/159827_images/4.jpg",
    "description": "Тип даних – це множина значень і операцій на цими значеннями. До основних вбудованих типів в Python відносяться:\n1.int — цілі числа, наприклад:100, 55, 1, 32131 і так далі;\n2.float — числа з крапкою, тобто десяткові дроби, наприклад: 3.14, 56.56, 1.0;\n3.str — рядкові змінні.Щоб Python зрозумів, що ви хочете створити рядкову змінну, необхідно укласти символи рядка в лапки;\n4.bool — логічні значення True та False;\n5.list — список, упорядкований змінюваний контейнер даних. Його можна створити за допомогою [];\n6.dict — Словник(контейнер), який зберігає пари “ключ” — “значення”. Його можна створити за допомогою {};\n7.tuple(Кортежі) — це структури даних, схожі на списки, але з однією ключовою відмінністю: вони незмінні. Можна створити за допомогою ();\n8.set або Множини — це невпорядкований контейнер, який містить тільки унікальні елементи. Створення за допомогою {}.",
    "link": "https://www.youtube.com/watch?v=LjL1vceYerE"
  },
  {
    "name": "Цикл for",
    "poster": "https://785252043-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FBq3lw0MzkY4aTe64Pj26%2Fuploads%2FIwRrk3SfJZIM38kGWIUz%2Fimage.png?alt=media&token=80f141e7-4b0d-45bd-93e0-ab1ac6fab3bc",
    "description": "У Python цикл for використовується для перебору всіх елементів контейнерів або ітерованих об'єктів, наприклад, списків. Інструкції, які знаходяться в тілі циклу, будуть виконані стільки разів, скільки елементів у списку. При цьому на кожній ітерації спеціальна змінна отримує значення одного з елементів списку.\nСинтаксис цикла for\n1.Цикл починається з ключового слова for;\n2.за яким обов'язково йде назва змінної, куди буде записуватися значення, що отримується з об'єкту, який повторюється, на кожній ітерації;\n3.далі йде ключове слово in;\n4.за яким обов'язково йде вираз або об'єкт за яким, власне, буде ітеруватися for;\n5.далі ставиться :\n6.і з нового рядка з відступом йде набір виразів, які повторюватимуться на кожній ітерації.",
    "link": "https://www.youtube.com/watch?v=3bqqRAyl-ds"
  },
  {
    "name": "Цикл while",
    "poster": "https://785252043-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FBq3lw0MzkY4aTe64Pj26%2Fuploads%2Fg10VVtQyeovCzgDHU6KZ%2Fimage.png?alt=media&token=cbe76bd8-c1c4-4c9d-bff8-d08ae2aeacc9",
    "description": "Цикл while дозволяє виконувати інструкції, які перебувають у тілі циклу доти, доки виконується умова, зазначена в циклі.",
    "link": "https://www.youtube.com/watch?v=zEivpVdoGGA"
  },
  {
    "name": "Списки",
    "poster": "https://kyb-edu.in.ua/wp-content/uploads/2021/04/image-17-1024x410.png",
    "description": "Список — упорядкований змінюваний контейнер даних. Списки не диктують розробнику тип даних, який можна помістити в цей контейнер, і можуть містити будь-які типи даних у будь-якому зручному порядку.\nСписок — це послідовність значень (подібна до масиву в інших мовах програмування, але більш універсальна). Значення у списку називаються елементами. \nСписки Python мають такі важливі властивості:\nСписки впорядковані — списки запам’ятовують порядок вставлених елементів.\nДоступ за індексом — доступ до елементів у списку можна отримати за допомогою індексу.\nСписки можуть містити будь-які об’єкти — це можуть бути числа, рядки, кортеж.\nСписки можна змінювати — ви можете змінювати список на місці, додавати нові елементи, а також видаляти чи оновлювати наявні елементи. Для створення порожнього списку є два способи:\nmy_list = list()\nempty_list = []\nСтворення заповненого списку:\nnot_empty = [1, 2, 'user']",
    "link": "https://www.youtube.com/watch?v=MW67DyVKKD0"
  },
  {
    "name": "Функції",
    "poster": "https://3627081962-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FLO76otVT3YRfKuwbN3nO%2Fuploads%2FguvhuNmMGdBgFdyacDTJ%2Fimage.png?alt=media&token=fe47623a-35c2-4863-a665-2413faa02254",
    "description": "Функції — це фрагменти програми, що використовуються багаторазово. Вони дають змогу дати ім'я певному блоку команд для того, щоб згодом запускати цей блок за вказаним ім'ям у будь-якому місці програми і скільки завгодно разів. Це називається викликом функції. \n1.Функції визначаються за допомогою зарезервованого слова def.\n2.Після цього слова вказується ім'я функції, за яким йде пара дужок, у яких можна вказати імена деяких змінних, і заключна двокрапка наприкінці рядка.\n3.Далі йде блок команд, що складають функцію. \nПараметри функції — це певні вхідні дані, які ми можемо передати функції, щоб отримати відповідний їм результат. Функції можуть приймати параметри, тобто деякі значення, що передаються функції для того, щоб вона що-небудь зробила з ними. Ці параметри схожі на змінні, за винятком того, що значення цих змінних вказується під час виклику функції, і під час роботи функції їм уже присвоєно їхні значення.",
    "link": "https://www.youtube.com/watch?v=Zn-IxM3NuwY"
  },
  {
    "name": "Лямбда Функції",
    "poster": "https://miro.medium.com/v2/resize:fit:960/1*UcWzl_DI5cXBfm1jl-1vUw.png",
    "description": "Лямбда-функція - це невелика анонімна функція, визначена за допомогою ключового слова lambda. Лямбда-функції можуть приймати будь-яку кількість аргументів, але можуть мати лише один вираз. Цей вираз виконується і результат повертається як результат функції.\nЛямбда-функції зазвичай використовуються в місцях, де потрібна функція для короткотривалого використання. Вони широко використовуються в функціональному стилі програмування, наприклад, як аргументи для функцій вищого порядку, таких як map(), filter(), reduce().\nЛямбда-функції не потребують іменування, що робить їх ідеальними для використання в місцях, де функція потрібна як локальний одноразовий інструмент. Вони називаються \"анонімними\", тому що, на відміну від звичайних функцій, створених за допомогою def, лямбда-функції не мають явної назви. Ці функції можуть приймати будь-яку кількість аргументів, але можуть мати лише один вираз, значення якого і буде повернуто.",
    "link": "https://www.youtube.com/watch?v=Zn-IxM3NuwY"
  },
  {
    "name": "Множини",
    "poster": "https://pynative.com/wp-content/uploads/2021/03/python-sets.jpg",
    "description": "Множини використовуються для зберігання декількох елементів в одній змінній. \nМножина — це один з 4 вбудованих типів даних у мові Python, який використовується для зберігання наборів даних. \nМножина — це невпорядкований контейнер, який містить тільки унікальні елементи. У множину можна додавати тільки незмінні типи даних.\nПрикладами множин може бути колода гральних карт, перелік номерних знаків авто, телефонний довідник, серія та номер паспорта. Є лише один спосіб створити порожню множину:\na=set()\nprint(a)\nДля створення заповненої множини достатньо передати будь-який ітерований об'єкт у функцію set:\na = set('hello')\nprint(a)\nУнікальність передбачає, що якщо множина вже містить такий елемент, то спроба додати ще один такий самий нічого не змінить.",
    "link": "https://www.youtube.com/watch?v=LDT6o7pDNLM"
  },
  {
    "name": "Кортежі",
    "poster": "https://www.scientecheasy.com/wp-content/uploads/2023/04/elements-indexing-in-python-tuple.png",
    "description": "Кортежі в Python — це структури даних, схожі на списки, але з однією ключовою відмінністю: вони незмінні. Головні властивості: \nКортежі використовуються для зберігання кількох елементів в одній змінній.\nКортеж — це один із 4 вбудованих типів даних у Python, які використовуються для зберігання колекцій даних, інші 3 — це список, набір і словник, усі з різними якостями та використанням.\nКортеж — це впорядкований і незмінний набір.\nКортежі записуються в круглих дужках.\nНезмінність: Як уже згадано, елементи всередині кортежу не можуть бути змінені після його створення. Це робить кортежі більш надійними для передачі даних між частинами програми, що повинні залишатися незмінними.\nІтераційність: Кортежі можуть бути ітерованими, тобто ви можете перебирати їх елементи за допомогою циклу. Це дозволяє використовувати кортежі у всіх сценаріях, де потрібен доступ до послідовності елементів.\nІндексація",
    "link": "https://www.youtube.com/watch?v=B5bTQeYrQOY"
  },
  {
    "name": "Словник",
    "poster": "https://dotnettrickscloud.blob.core.windows.net/img/python/2820230312012106.webp",
    "description": "Словник — це контейнер, який зберігає пари “ключ” — “значення”. Ключем може бути будь-який незмінний тип даних Python (число, рядок, кортеж, ін.).\nНеможливо використовувати як ключ списки, словники, множини або будь-які інші типи даних, що змінюються. \nПорожній словник можна створити, використовуючи функцію dict() або просто вказавши порожні фігурні дужки. Деякі методи словників, що найчастіше використовуються:\nget(key[, default]) — не викликає виключення, якщо ключа немає в словнику, повертає default, за замовченням default=None\nДодавання нового елемента до словника. Для того, щоб додати нові дані в словник, достатньо новому ключу цього словника призначити будь-яке значення. ",
    "link": "https://www.youtube.com/watch?v=9NUWkobcVC0"
  },
  {
    "name": "Рекурсія",
    "poster": "https://pydocs.ru/wp-content/uploads/2021/05/python-how-function-works_1.png",
    "description": "Рекурсія — це метод за допомогою якого функція викликає саму себе прямо або через інші функції, потужний інструмент для розв'язання задач, які можна розділити на схожі підзадачі меншого розміру. \nРекурсія часто використовується у випадках, коли задача природньо виражається через саму себе.\nОсновна ідея рекурсії полягає в зведенні складної задачі до однієї або декількох простіших задач того ж типу, до тих пір, поки не буде досягнуто випадку, який можна легко вирішити без подальшої рекурсії. Це досягається шляхом розбиття задачі на підзадачі, кожна з яких є менш складною версією оригінальної задачі. Такий підхід дозволяє вирішувати складні проблеми методом \"розділяй та володарюй\".\nВикористання рекурсії в програмуванні приносить як переваги, так і недоліки, залежно від контексту задачі та способу її реалізації.",
    "link": "https://www.youtube.com/watch?v=FOFVG2lGXZg"
  },
  {
    "name": "Замикання",
    "poster": "https://avatars.dzeninfra.ru/get-zen_doc/9196493/pub_643fc354a84f55469c773ffe_643fc5532171c245fa06f974/scale_1200",
    "description": "Замикання — це функція, яка захоплює та \"пам'ятає\" змінні зі свого лексичного контексту, навіть коли виконання програми залишає цей контекст. Замикання дозволяє функції доступ до змінних, що були в її області видимості в момент створення, незалежно від того, де функцію викликано чи як вона використовується. closure - це техніка, яка дозволяє зберігати значення зі змінних, що були в області видимості під час створення функції, і продовжувати їх використовувати після завершення виконання цієї функції. Як працює замикання:\nЗамикання виникає, коли внутрішня функція звертається до змінних, оголошених у зовнішній функції.\nВнутрішня функція \"запам'ятовує\" стан своєї зовнішньої області видимості, навіть коли зовнішня функція завершила виконання. Коли функція визначається в середовищі, де вона має доступ до однієї або декількох вільних змінних, створюється замикання.",
    "link": "https://www.youtube.com/watch?v=tNSOaA1z6Uo"
  },
  {
    "name": "Декоратор",
    "poster": "https://pythonlobby.com/wp-content/uploads/2020/09/decorators-in-python-4.jpg",
    "description": "Декоратор — це функція, яка дозволяє додати нову функціональність до існуючих функцій або методів без зміни їхнього вихідного коду. Декоратори приймають функцію як аргумент, обертають її у функціональність внутрішньої функції (обгортки) та повертають нову функцію з розширеною функціональністю. Це дозволяє застосовувати принципи reusability і DRY у програмуванні, зробивши код більш читабельним, ефективним та легким для підтримки. Декоратор також можна описати як механізм для зміни або розширення функціональності функцій та методів без зміни їхнього коду.\nДекоратор це, зазвичай, функція, яка приймає функцію як аргумент і повертає нову функцію. Щоб застосувати декоратор, використовується синтаксис @decorator_name перед визначенням функції, який розташовується перед ім'ям декоратора та розміщується над декорованою функцією.",
    "link": "https://www.youtube.com/watch?v=mWB_QVwptz0&t=110s"
  },
  {
    "name": "Ітератори",
    "poster": "https://s3.eu-north-1.amazonaws.com/lms.goiteens-files/7858d175-aac2-4d51-93de-e335dc652b7aimage.png",
    "description": "Ітератори — це об'єкти, які дозволяють вам ітерувати (проходити) по елементах колекції (наприклад, списку, кортежу, словнику, множини) або будь-якого іншого об'єкту, який підтримує ітерацію. Використання ітераторів є фундаментальною концепцією в Python і дозволяє реалізувати \"ліниві\" обчислення, при яких елементи обчислюються по одному, за потребою, замість завчасного обчислення всієї послідовності. наступного елемента послідовності відбувається лише тоді, коли це потрібно, а не заздалегідь. Це робить роботу з потенційно великими або навіть нескінченними послідовностями даних ефективнішою.\nІтератори реалізують два основних методи:\n__iter__(): цей метод повертає сам ітератор, що дозволяє використовувати ітератори в циклах for та інших місцях, де очікуються ітеровані об'єкти. У більшості випадків метод просто повертає self.\n__next__(): цей метод повертає наступний елемент послідовності.",
    "link": "https://www.youtube.com/watch?v=YmKzX7Rp8d4"
  },
  {
    "name": "Генератори",
    "poster": "https://s3.eu-north-1.amazonaws.com/lms.goiteens-files/efebe0df-2794-45a6-ab64-bcb98a511ae4image.png",
    "description": "Генератори — це спеціалізовані ітератори, які використовуються для легкої та ефективної реалізації ітерацій без необхідності визначати класи ітераторів з методами __iter__() та __next__(). Вони використовують ключове слово yield для тимчасової передачі значення та призупинення виконання функції, дозволяючи продовжити виконання з того місця, де це було призупинено, на наступній ітерації. Генератори виконують обчислення \"на льоту\" та повертають елементи один за одним за допомогою ключового слова yield, призупиняючи та продовжуючи виконання функції між кожним викликом yield.\nВикористання ключового слова yield. Ключове слово yield використовується в тілі генераторної функції для вказівки значення, яке повинно бути повернуто на поточному кроці ітерації. Виклик yield також призупиняє виконання функції, зберігаючи її стан, щоб можна було продовжити виконання з того ж місця при наступному виклику next() на генераторі.",
    "link": "https://www.youtube.com/watch?v=_0U5u2Oj8Fo"
  },
  {
    "name": "Бібліотека datetime",
    "poster": "https://pynative.com/wp-content/uploads/2021/07/python_parse_string_to_datetime.png",
    "description": "Модулі datetime та time у Python надають інструменти для роботи з датами та часом. Вони дозволяють створювати, маніпулювати та форматувати дати та часи з високою точністю, а також проводити розрахунки, пов'язані з часовими проміжками.\nМаніпуляція з датами та часом є одним із найчастіших завдань у програмуванні, а Python надає різноманітні інструменти для цього через модулі, як datetime та time.\nОб'єкт date представляє дату в григоріанському календарі. Він включає рік, місяць та день.\nОб'єкт time представляє час, незалежно від дати. Він може включати годину, хвилину, секунду та мікросекунду.\nОб'єкт datetime є комбінацією дати та часу. Він використовується для представлення точних моментів в часі.\nОб'єкт timedelta представляє тривалість, різницю між двома датами або часами. Він може використовуватися для додавання або віднімання часових проміжків до дат та часів.",
    "link": "https://www.youtube.com/watch?v=eirjjyP2qcQ"
  },
  {
    "name": "Обробка винятків try except",
    "poster": "https://files.realpython.com/media/try_except_else_finally.a7fac6c36c55.png",
    "description": "Винятки — це особливі ситуації, які виникають під час виконання програми і можуть спричинити її зупинку, якщо не будуть оброблені належним чином. Помилки в програмуванні можуть бути різних типів:\nсинтаксичні помилки, \nлогічні помилки, \nвинятки. \nВинятки — це помилки, які виникають під час виконання програми. Вони можуть виникати через неправильний ввід користувача, неправильний доступ до даних або інші непередбачені обставини. Конструкція try-except працює так\nКод, який може викликати виняток, поміщається у блок try.\nЯкщо виникає виняток, виконання програми переходить до блоку except, де цей виняток обробляється. Блок try містить код, який потенційно може викликати помилку. Якщо під час виконання виникає помилка, програма негайно переходить до блоку except.\nБлок except містить код, який виконується, якщо в блоці try виникає виняток. Ви можете вказати тип винятку, який хочете обробляти.",
    "link": "https://www.youtube.com/watch?v=tRpU_11HCYo"
  },
  {
    "name": "ООП",
    "poster": "https://d1jnx9ba8s6j9r.cloudfront.net/blog/wp-content/uploads/2019/06/Object-Oriented-Programm-Python-1.jpg",
    "description": "Об'єктно-орієнтоване програмування оперує двома основними поняттями — класом і об'єктом. Це фундаментальні концепції, які допомагають організовувати програму навколо сутностей із реального світу або абстрактних ідей.\nКлас можна розглядати як креслення або шаблон, який визначає структуру і поведінку об'єктів, що створюються на його основі.Клас описує, які атрибути (дані) і методи (функції) будуть доступні у створених об'єктів. Іншими словами, клас не є самим об'єктом, а лише визначає, якими об'єкт має бути, що він може зберігати та що може робити.\nНаприклад, якщо клас описує автомобіль, то він може містити атрибути \"марка\", \"модель\", \"колір\" і методи \"почати рух\" або \"зупинитися\". Клас є універсальним шаблоном, який можна використовувати для створення конкретних автомобілів з певними властивостями.\nОб'єкт — це конкретний екземпляр класу, створений на основі його шаблону. ",
    "link": "https://www.youtube.com/watch?v=-MkKEhcyt54"
  },
  {
    "name": "ООП. Інкапсуляція",
    "poster": "https://avatars.dzeninfra.ru/get-zen_doc/271828/pub_674374c0fa0f7f43d39a36cc_674375c7c120ca5b298a0027/scale_1200",
    "description": "Інкапсуляція є одним із ключових принципів об'єктно-орієнтованого програмування, що полягає в обмеженні доступу до внутрішніх даних об'єкта.\nОсновна ідея полягає в тому, щоб приховати внутрішні деталі реалізації та дозволити взаємодію з об'єктом лише через певні методи, забезпечуючи захист даних та контроль за їх використанням. Інкапсуляція допомагає захистити дані від некоректного або небажаного втручання, забезпечуючи доступ до них лише через спеціально визначені методи.\nУ Python передбачено три рівні доступу до атрибутів та методів:\npublic (публічний)\nprotected (захищений)\n private (приватний). Public атрибути і методи є загальнодоступними і можуть бути використані будь-яким кодом. Вони не мають спеціальних позначень і доступні для зовнішнього використання. Public атрибути та методи — це елементи класу, які доступні для використання зовні.",
    "link": "https://www.youtube.com/watch?v=uuP1g63Tv90"
  },
  {
    "name": "ООП. Інкапсуляція 2)",
    "poster": "https://avatars.dzeninfra.ru/get-zen_doc/271828/pub_674374c0fa0f7f43d39a36cc_674375c7c120ca5b298a0027/scale_1200",
    "description": "Protected атрибути позначаються за допомогою одного підкреслення перед іменем. Вони вказують, що атрибут або метод не призначений для прямого використання зовнішніми класами, але доступний для використання у класах-нащадках. Це рівень захисту між public та private. У об'єктно-орієнтованому програмуванні є необхідність створювати атрибути та методи, які не повинні бути доступні для загального використання, але які можуть бути доступні для спадкоємців класу. Такий механізм називається захищеними атрибутами та методами. Хоча protected атрибути та методи доступні зовні, зазвичай вважається, що вони не повинні використовуватися напряму поза межами класу або його нащадків.\nВ об'єктно-орієнтованому програмуванні важливо інколи обмежувати доступ до атрибутів або методів класу, щоб приховати їх від прямого доступу ззовні. Це робить клас безпечнішим і зручнішим для використання.",
    "link": "https://www.youtube.com/watch?v=uuP1g63Tv90"
  },
  {
    "name": "Гетери та сетери",
    "poster": "https://avatars.dzeninfra.ru/get-zen_doc/271828/pub_674374c0fa0f7f43d39a36cc_674375c7c120ca5b298a0027/scale_1200",
    "description": "В об'єктно-орієнтованому програмуванні часто потрібно обмежувати прямий доступ до атрибутів класу, особливо коли йдеться про захист даних або збереження їхньої цілісності. Для цього використовуються приватні атрибути, до яких неможливо звернутися напряму ззовні класу. Проте, щоб забезпечити доступ до цих атрибутів, використовують спеціальні методи – гетери (для читання значення) та сетери (для встановлення значення). Гетери та сетери дозволяють контролювати доступ до даних: перевіряти умови, виконувати додаткові дії перед їх встановленням або поверненням. Завдяки цьому можна забезпечити логіку взаємодії з атрибутами, наприклад, не дозволяти встановлювати недопустимі значення або автоматично обробляти отримані дані. ",
    "link": "https://www.youtube.com/watch?v=uuP1g63Tv90"
  },
  {
    "name": "ООП. Наслідування",
    "poster": "https://cs9.pikabu.ru/post_img/big/2020/10/11/5/1602399079181632240.png",
    "description": "Наслідування — це один із ключових принципів об'єктно-орієнтованого програмування, який дозволяє створювати нові класи на основі вже існуючих.\nУ наслідуванні один клас, що називається дочірнім або похідним, успадковує властивості та методи іншого класу — батьківського або базового. \nНаслідування дозволяє використовувати код повторно, уникаючи дублювання, та розширювати функціонал батьківського класу в дочірніх класах. Наслідування здійснюється шляхом вказання батьківського класу в дужках під час оголошення нового класу. Дочірній клас отримує всі методи й атрибути батьківського класу та може використовувати їх, ніби вони були визначені всередині нього. Водночас у дочірньому класі можна додавати нові або змінювати існуючі методи й атрибути, щоб змінити або розширити функціонал.\nПохідний клас може мати свій власний конструктор або використовувати конструктор батьківського класу.",
    "link": "https://www.youtube.com/watch?v=nB2QMVzgtpw"
  },
  {
    "name": "ООП. Поліморфизм",
    "poster": "https://avatars.dzeninfra.ru/get-zen_doc/4470631/pub_6468bf77347ec31a949c62c6_6468e88c2b3e4934867ff852/scale_1200",
    "description": "Поліморфізм в об’єктно-орієнтованому програмуванні дозволяє використовувати один і той самий метод для різних типів об'єктів. Це означає, що одна й та сама функція або метод можуть працювати з різними об'єктами та класами, і кожен об'єкт буде виконувати свою унікальну реалізацію цього методу. Важливим аспектом поліморфізму є те, що різні об’єкти можуть мати спільний інтерфейс, тобто набір методів, які вони повинні реалізовувати. Це дозволяє працювати з різними типами об’єктів однаково, викликаючи однакові методи незалежно від того, до якого класу належить об’єкт.\nПеревизначення методів, також відоме як оператор overloading, дозволяє реалізовувати поліморфізм у об'єктно-орієнтованому програмуванні. Це означає, що дочірні класи можуть змінювати або розширювати функціональність методів, які успадковуються від батьківського класу, щоб відповідати своїм специфічним завданням.",
    "link": "https://www.youtube.com/watch?v=aEOSBkzNImw"
  },
  {
    "name": "ООП. Абстракція",
    "poster": "https://s3.eu-north-1.amazonaws.com/lms.goiteens-files/d672fc7b-b74d-4424-8197-b359b9b9ac5dimage.png",
    "description": "Абстракція є одним із ключових принципів об'єктно-орієнтованого програмування. Вона дозволяє приховати складні деталі реалізації об'єкта і надавати інтерфейс, через який користувач може взаємодіяти з об'єктом. Кінцевий користувач працює лише з загальними методами і не потребує знати, як саме реалізовані ті чи інші функції. Абстракція дозволяє зробити код більш структурованим, оскільки складні операції розбиваються на окремі елементи з чітко визначеними завданнями. Для того щоб застосовувати абстракцію, створюються абстрактні класи та методи. Абстрактні класи задають структуру для дочірніх класів, але не визначають конкретної реалізації. ",
    "link": "https://www.youtube.com/watch?v=UDmJGvM-OUw"
  }
]